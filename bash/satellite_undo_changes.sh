#!/bin/bash

# Red Hat Satellite 6.17 Deployment Undo Script
# This script reverses changes made to the local system before subscription manager failures

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to create backup before changes
create_backup() {
    local file=$1
    if [[ -f "$file" ]]; then
        cp "$file" "${file}.backup.$(date +%Y%m%d_%H%M%S)"
        log "Backed up $file"
    fi
}

# Function to restore original file from backup
restore_from_backup() {
    local file=$1
    local backup_file="${file}.backup.*"
    
    # Find the most recent backup
    local latest_backup=$(ls -t ${backup_file} 2>/dev/null | head -1)
    
    if [[ -n "$latest_backup" && -f "$latest_backup" ]]; then
        cp "$latest_backup" "$file"
        success "Restored $file from backup"
    else
        warning "No backup found for $file"
    fi
}

echo "======================================================================="
echo "           RED HAT SATELLITE 6.17 DEPLOYMENT UNDO SCRIPT"
echo "======================================================================="
echo ""
echo "This script will undo changes made to your local system by the"
echo "Satellite deployment playbook up to the subscription manager failure."
echo ""
echo "Changes to be reverted:"
echo "  - Hostname changes"
echo "  - /etc/hosts modifications"
echo "  - Admin user creation"
echo "  - SSH key generation"
echo "  - Sudo configuration"
echo "  - Any installed packages (if requested)"
echo ""
echo "======================================================================="
echo ""

# Confirm execution
read -p "Do you want to proceed with undoing the changes? (y/N): " confirm
if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
    log "Undo operation cancelled by user"
    exit 0
fi

check_root

log "Starting Satellite deployment undo process..."

# ========================================
# 1. RESTORE HOSTNAME
# ========================================
log "Step 1: Restoring hostname..."

# Get current hostname
CURRENT_HOSTNAME=$(hostname)
ORIGINAL_HOSTNAME=$(cat /etc/hostname.original 2>/dev/null || echo "localhost.localdomain")

if [[ "$CURRENT_HOSTNAME" == "satellite" ]]; then
    warning "Current hostname is 'satellite', restoring to original"
    
    # Restore original hostname if backup exists
    if [[ -f "/etc/hostname.original" ]]; then
        cp /etc/hostname.original /etc/hostname
        hostnamectl set-hostname "$ORIGINAL_HOSTNAME"
        success "Hostname restored to: $ORIGINAL_HOSTNAME"
    else
        warning "No original hostname backup found, setting to localhost.localdomain"
        echo "localhost.localdomain" > /etc/hostname
        hostnamectl set-hostname "localhost.localdomain"
    fi
else
    log "Hostname appears unchanged (current: $CURRENT_HOSTNAME)"
fi

# ========================================
# 2. RESTORE /ETC/HOSTS
# ========================================
log "Step 2: Restoring /etc/hosts file..."

create_backup "/etc/hosts"

# Remove Satellite-related entries from /etc/hosts
if grep -q "satellite\|10\.168\.128\.102\|satellite\.prod\.spg" /etc/hosts; then
    warning "Found Satellite entries in /etc/hosts, removing them"
    
    # Remove lines containing satellite references
    sed -i '/satellite/d' /etc/hosts
    sed -i '/10\.168\.128\.102/d' /etc/hosts
    sed -i '/satellite\.prod\.spg/d' /etc/hosts
    
    success "Removed Satellite entries from /etc/hosts"
else
    log "/etc/hosts appears clean (no Satellite entries found)"
fi

# ========================================
# 3. REMOVE ADMIN USER
# ========================================
log "Step 3: Removing admin user and configurations..."

if id "admin" &>/dev/null; then
    warning "Admin user exists, removing..."
    
    # Remove admin user
    userdel -r admin 2>/dev/null || true
    
    # Remove sudo configuration
    if [[ -f "/etc/sudoers.d/admin" ]]; then
        rm -f /etc/sudoers.d/admin
        success "Removed admin sudo configuration"
    fi
    
    success "Removed admin user and home directory"
else
    log "Admin user does not exist (no action needed)"
fi

# ========================================
# 4. REMOVE SSH KEYS (if generated by script)
# ========================================
log "Step 4: Cleaning up SSH keys..."

# Remove root SSH keys if they were generated by the script
if [[ -f "/root/.ssh/id_rsa" ]]; then
    # Check if the key was created recently (within last 24 hours)
    if [[ $(find /root/.ssh/id_rsa -mtime -1 2>/dev/null) ]]; then
        warning "Recent SSH key found for root, removing..."
        rm -f /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
        success "Removed root SSH keys"
    else
        log "Root SSH keys appear to be pre-existing (keeping them)"
    fi
else
    log "No root SSH keys found"
fi

# ========================================
# 5. REMOVE SATELLITE PACKAGES (OPTIONAL)
# ========================================
log "Step 5: Checking for installed Satellite packages..."

# Check if satellite packages were installed
SATELLITE_PACKAGES=(
    "satellite"
    "dhcp-server"
    "tftp-server"
    "syslinux-tftpboot"
    "bind"
    "bind-utils"
)

INSTALLED_PACKAGES=()
for package in "${SATELLITE_PACKAGES[@]}"; do
    if rpm -q "$package" &>/dev/null; then
        INSTALLED_PACKAGES+=("$package")
    fi
done

if [[ ${#INSTALLED_PACKAGES[@]} -gt 0 ]]; then
    warning "Found Satellite-related packages: ${INSTALLED_PACKAGES[*]}"
    echo ""
    read -p "Do you want to remove these packages? (y/N): " remove_packages
    
    if [[ "$remove_packages" =~ ^[Yy]$ ]]; then
        log "Removing Satellite packages..."
        dnf remove -y "${INSTALLED_PACKAGES[@]}" || true
        success "Removed Satellite packages"
    else
        log "Keeping installed packages (user choice)"
    fi
else
    log "No Satellite packages found to remove"
fi

# ========================================
# 6. REMOVE SATELLITE DIRECTORIES
# ========================================
log "Step 6: Cleaning up Satellite directories..."

SATELLITE_DIRS=(
    "/var/satellite-backups"
    "/var/lib/tftpboot/pxelinux.cfg"
    "/opt/satellite-deployment"
)

for dir in "${SATELLITE_DIRS[@]}"; do
    if [[ -d "$dir" ]]; then
        warning "Removing Satellite directory: $dir"
        rm -rf "$dir"
        success "Removed $dir"
    fi
done

# Remove symlinks
if [[ -L "/usr/local/bin/satellite_deploy" ]]; then
    rm -f /usr/local/bin/satellite_deploy
    success "Removed satellite_deploy symlink"
fi

# ========================================
# 7. REMOVE TFTP BOOT FILES
# ========================================
log "Step 7: Cleaning up TFTP boot files..."

TFTP_FILES=(
    "/var/lib/tftpboot/pxelinux.0"
    "/var/lib/tftpboot/ldlinux.c32"
    "/var/lib/tftpboot/menu.c32"
    "/var/lib/tftpboot/vesamenu.c32"
    "/var/lib/tftpboot/libutil.c32"
)

for file in "${TFTP_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        rm -f "$file"
        log "Removed TFTP file: $file"
    fi
done

# ========================================
# 8. RESTORE FIREWALL (if modified)
# ========================================
log "Step 8: Checking firewall configuration..."

# Check if firewalld has Satellite services enabled
SATELLITE_SERVICES=("tftp" "dhcp" "dns")
SATELLITE_PORTS=("5647/tcp" "8140/tcp" "9090/tcp" "53/udp" "67/udp" "69/udp")

MODIFIED_FIREWALL=false

for service in "${SATELLITE_SERVICES[@]}"; do
    if firewall-cmd --query-service="$service" 2>/dev/null; then
        warning "Removing firewall service: $service"
        firewall-cmd --remove-service="$service" --permanent
        MODIFIED_FIREWALL=true
    fi
done

for port in "${SATELLITE_PORTS[@]}"; do
    if firewall-cmd --query-port="$port" 2>/dev/null; then
        warning "Removing firewall port: $port"
        firewall-cmd --remove-port="$port" --permanent
        MODIFIED_FIREWALL=true
    fi
done

if [[ "$MODIFIED_FIREWALL" == "true" ]]; then
    firewall-cmd --reload
    success "Restored firewall configuration"
else
    log "Firewall appears unchanged"
fi

# ========================================
# 9. REMOVE SELINUX BOOLEANS (if set)
# ========================================
log "Step 9: Checking SELinux booleans..."

SELINUX_BOOLEANS=(
    "httpd_can_network_connect"
    "httpd_can_network_relay"
    "httpd_execmem"
    "httpd_unified"
)

for boolean in "${SELINUX_BOOLEANS[@]}"; do
    if getsebool "$boolean" 2>/dev/null | grep -q "on"; then
        warning "Disabling SELinux boolean: $boolean"
        setsebool -P "$boolean" off || true
    fi
done

# ========================================
# 10. CLEANUP LOG FILES AND REPORTS
# ========================================
log "Step 10: Cleaning up deployment artifacts..."

CLEANUP_FILES=(
    "/tmp/satellite_preflight_failure_report.txt"
    "/var/log/satellite_deployment_report.log"
    "/tmp/vault_pass"
)

for file in "${CLEANUP_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        rm -f "$file"
        log "Removed: $file"
    fi
done

# ========================================
# 11. REMOVE DEPLOYMENT SCRIPTS (OPTIONAL)
# ========================================
log "Step 11: Checking deployment scripts..."

DEPLOYMENT_SCRIPTS=(
    "/usr/local/bin/satellite_backup.sh"
    "/usr/local/bin/satellite_maintenance.sh"
    "/usr/local/bin/satellite_monitor.sh"
    "/usr/local/bin/satellite_tuning.sh"
)

SCRIPT_COUNT=0
for script in "${DEPLOYMENT_SCRIPTS[@]}"; do
    if [[ -f "$script" ]]; then
        ((SCRIPT_COUNT++))
    fi
done

if [[ $SCRIPT_COUNT -gt 0 ]]; then
    echo ""
    read -p "Remove Satellite management scripts? (y/N): " remove_scripts
    
    if [[ "$remove_scripts" =~ ^[Yy]$ ]]; then
        for script in "${DEPLOYMENT_SCRIPTS[@]}"; do
            if [[ -f "$script" ]]; then
                rm -f "$script"
                log "Removed: $script"
            fi
        done
        success "Removed Satellite management scripts"
    else
        log "Keeping management scripts (user choice)"
    fi
fi

# ========================================
# 12. FINAL CLEANUP AND VERIFICATION
# ========================================
log "Step 12: Final verification..."

# Check for any remaining satellite processes
if pgrep -f satellite >/dev/null; then
    warning "Found running Satellite processes, stopping them..."
    pkill -f satellite || true
fi

# Stop and disable Satellite services if they exist
SATELLITE_SERVICES_SYS=("dhcpd" "tftp" "named" "satellite-tuning")

for service in "${SATELLITE_SERVICES_SYS[@]}"; do
    if systemctl is-active --quiet "$service" 2>/dev/null; then
        warning "Stopping service: $service"
        systemctl stop "$service" || true
    fi
    
    if systemctl is-enabled --quiet "$service" 2>/dev/null; then
        warning "Disabling service: $service"
        systemctl disable "$service" || true
    fi
done

# Remove any created systemd service files
SERVICE_FILES=(
    "/etc/systemd/system/satellite-tuning.service"
)

for service_file in "${SERVICE_FILES[@]}"; do
    if [[ -f "$service_file" ]]; then
        rm -f "$service_file"
        log "Removed: $service_file"
    fi
done

# Reload systemd if we removed service files
if [[ -n "$(find /etc/systemd/system/ -name '*satellite*' 2>/dev/null)" ]]; then
    systemctl daemon-reload
    log "Reloaded systemd configuration"
fi

# ========================================
# COMPLETION REPORT
# ========================================
echo ""
echo "======================================================================="
echo "                    SATELLITE UNDO OPERATION COMPLETED"
echo "======================================================================="
echo ""
success "Successfully undid Satellite deployment changes!"
echo ""
echo "Summary of actions taken:"
echo "  ✅ Restored hostname (if changed)"
echo "  ✅ Cleaned /etc/hosts file"
echo "  ✅ Removed admin user and sudo config"
echo "  ✅ Cleaned up SSH keys (if recently created)"
echo "  ✅ Removed Satellite directories"
echo "  ✅ Cleaned TFTP boot files"
echo "  ✅ Restored firewall configuration"
echo "  ✅ Reset SELinux booleans"
echo "  ✅ Stopped and disabled Satellite services"
echo "  ✅ Cleaned deployment artifacts"
if [[ "$remove_packages" =~ ^[Yy]$ ]]; then
echo "  ✅ Removed Satellite packages"
fi
if [[ "$remove_scripts" =~ ^[Yy]$ ]]; then
echo "  ✅ Removed management scripts"
fi
echo ""
echo "Your system has been restored to its pre-deployment state."
echo ""
warning "Note: If you had subscription-manager registration failures,"
warning "you may need to manually clean up any partial registrations:"
warning "  sudo subscription-manager unregister (if partially registered)"
warning "  sudo subscription-manager clean"
echo ""
success "Undo operation completed successfully!"
echo "======================================================================="
